// Simplified, syntactically-correct Jenkinsfile
pipeline {
    agent any

    environment {
        // Docker image name to build and test
        DOCKER_IMAGE = "aabasimel/messaging-app:${BUILD_NUMBER}"
        TEST_REPORT_DIR = 'messaging_app/test-reports'
    }

    options {
        timestamps()
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                // Use the Git plugin checkout
                git branch: 'main', url: 'https://github.com/aabasimel/alx-backend-python.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('messaging_app') {
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Run Tests in Docker') {
            steps {
                script {
                    sh '''
                        mkdir -p ${TEST_REPORT_DIR}
                        docker run --rm \
                          -v "${WORKSPACE}/messaging_app:/app" \
                          -v "${WORKSPACE}/${TEST_REPORT_DIR}:/app/test-reports" \
                          ${DOCKER_IMAGE} \
                          bash -lc "pip install pytest pytest-html && cd /app && pytest --html=test-reports/report.html --self-contained-html"
                    '''
                }
            }
        }

        stage('Archive Reports') {
            steps {
                archiveArtifacts artifacts: '${TEST_REPORT_DIR}/**/*', fingerprint: true
            }
        }
    }

    post {
        always {
            publishHTML([
                allowMissing: true,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: TEST_REPORT_DIR,
                reportFiles: 'report.html',
                reportName: 'PyTest Report'
            ])
            cleanWs()
        }
        success {
            echo "Build succeeded: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
        }
        failure {
            echo "Build failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
        }
    }
}